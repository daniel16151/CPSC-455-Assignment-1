day 1:
- started setting up MySQL backend on InfinityFree alongside MySQL databases.
- implemented a brand new changelog and documentation for the capstone.
- implemented databases that stores user information, messages, and logs.
- started setting up firebase storage for file sharing, which will be useful later on within the project.
- all of these were implemented by Daniel so far. nothing from Elvis in terms of day 1 progress.

day 2:
- converted the chat application to an actual website with the subdomain aquired. 
- instead of client.py, index.html and chat.js are the main files that are needed to be adjusted now
- server.py remains the same, and adjustments are still required for that python file.

day 3:
- asked AI for help in terms of how I can implement a heartbeat/ping mechanism, hopefully completing task 2 or at least almost fully completed
- branched off of the main code just to be cautious
- made 2 pull requests, awaiting for other group member to confirm if that it works or not.

day 4:
- implemented online/offline presence and was improvised even more with AI in terms of how to make it more smoother
- branched off once again just to be safe
- merged the pull request to form into one branch, and merged again to main after knowing that the heartbeat mechanism works according to the other group member
- made another pull request and branch, alongside the fact that it happens to be the online/offline presence implementation

day 5:
- made the project compatible with railway
- connection with railway was successful

day 6:
- changed heartbeat mechanism to websocket's built in ping system through .serve
- changed logic for ports on server.py to ensure railway runs smoothly
- added files to infinityfree to host frontend
- renamed chat.js to message.js (infinityfree blocks anything named chat)
- changed how files are sent and made them only download if you click on them
- added firebase to store file uploads and scan them for uploads
- added checks for files to prevent malicious / large files from being sent
- added rate limiting to messages on the server
- added database logic for server.py to Postgres on Railway
- change logging logic to SQL for Postgres on Railway
- added table creation to server.py to generate them if they don't exist
- added reconnect logic to message.js
- adjusted server.py to properly allow them to relog once reconnection has taken place
- added CSP to prevent XSS attacks
- added denial of x-frame to prevent clickjacking
- ssl added through infinityfree
- made firebase.js to contain code for script to ensure CSP could run without problems
- added encryption to messages between users when logging their messages
    -done through cryptography library Fernet
    
day 7:
- added firebase storage link to CSP to enable access to file upload
- added in end to end encrpytion and branched that just to make sure it functions right or not
- same with the addition to offline list and adding in typing indicator, which were all branched as well just in case
