day 1 of the assignment:
- installed and implemented websockets in python 
- got help/assists from AI in terms of what libraries/definitions/or whatever exists within websockets and asyncio

- looked at a video and used it to to help create the server portion of server.py
- adjusted server.py to run until a call to close it
- added try and catch to test for potential errors when connecting from client
- client adjusted to send a message to server to see if connection works
- removed two arguments from echo
- added user input to client
- added way to disconnect from server through input

day 2 of the assignment:
- got even more help from AI in terms of where the code went wrong.
- adjusted client.py and server.py
- ran through the files
- started to work again with pings, even with server noticing what we typed in the server.py from client.py
- pushed origin in to ensure changes

- undid 2nd argument on echo
    - only necessary from before version 11 of websockets
- allow server to differentiate clients and send message from one client to another
- added connect_clients to keep track of each client that joins
- created ssl self-signed (for now) certificate / ssl key
- added function for verification from client to server

-imported 3 new libraries
    -queue
        -allows one client to send multiple messages without needing to wait for the other client to respond
    -tkinter
        -allows creation of gui from terminal
    -threading
        -allows concurrent use of gui / websocket_client 
-added new def for sending and receiving messages
    -adjusted websocket_client to implement those changes with the queue system
-added new def for start / creation of gui
-added def click_send and def poll within def start_gui to add a send button
    -click_send for send button
    -poll for checking message queue / updating gui
-main adjusted to create thread and gui


