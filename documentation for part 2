Before we start the documentation, once again we have to say that we got help/assists from chatgpt and gemini ai, thank you.

Firstly, we started looking at our code and wonder how we can add more into it, and that's when it clicked that we should start simple first with emoji and rich text support. Knowing that python already support emojis, we knew that we needed rich text support now, so we implemented such practices, especially with chatgpt's help in terms of what hints it gave us, and we implemented after it clicked on us. We then ran the code and the code was able to support both emoji and rich text support.

Implemented SSL certification and private key. For now, the code will be using a self-signed certification for ease of use and testing, but will adjust in the future for proper protection. 

In part 1, we encountered the issue of a client requiring a response before it can send a message again, so we implemented a queue system that would separate the message / receive into different functions, allowing them to work in parallel, instead of messaging waiting on response. The user also had an issue with ease of use, so we implemented a simplistic GUI that will be updated with more flavor in a later iteration. This GUI is created upon running client.py, and introduces a white chatbox where you can type and send messages to other clients on the network, along with a better view of the chat. Our next goal will be introducing a database to store user and passwords, so we can identify the connected clients and allow each client to individually message each other.
Another aim is to update the way to connect, as localhost will not cut it. 

In addition to that, we chose to add in file sharing and a chat log system to see if that will function within our code, but thus far, it hasn't fully functioned yet since it has errors at the moment, but will be fixed as soon as possible (obviously this took place before the due date).

Instructions:
Install python and websockets on two systems.
Once they are installed, run server.py on one system, and wait until "Websocket server started on ws://127.0.0.1:7890" has popped up. 
Once that has popped up, run client.py to join the server on the first system.
Run client.py on the second system and enter your user input on either client to communicate with the other.
(For the URI, make sure to set [127.0.0.1] to the local IP of the host system. This can be found by entering ipconfig into cmd prompt in host system.)